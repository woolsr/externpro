diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..a225794
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,131 @@
+cmake_minimum_required(VERSION 3.3)
+project(jxrlib)
+include(GNUInstallDirs)
+include(flags OPTIONAL)
+set(lib_name ${PROJECT_NAME})
+#######################################
+set(JXRCommon_srcs
+  image/sys/adapthuff.c
+  image/sys/ansi.h
+  image/sys/common.h
+  image/sys/image.c
+  image/sys/perfTimer.h
+  image/sys/perfTimerANSI.c
+  image/sys/strcodec.c
+  image/sys/strcodec.h
+  image/sys/strPredQuant.c
+  image/sys/strTransform.c
+  image/sys/strTransform.h
+  image/sys/windowsmediaphoto.h
+  image/sys/xplatform_image.h
+  )
+source_group(JXRCommon FILES ${JXRCommon_srcs})
+list(APPEND ${lib_name}_libsrcs ${JXRCommon_srcs})
+###################
+set(JXRDecode_srcs
+  image/decode/decode.c
+  image/decode/decode.h
+  image/decode/JXRTranscode.c
+  image/decode/postprocess.c
+  image/decode/segdec.c
+  image/decode/strdec.c
+  image/decode/strdec_x86.c
+  image/decode/strInvTransform.c
+  image/decode/strPredQuantDec.c
+  )
+source_group(JXRDecode FILES ${JXRDecode_srcs})
+list(APPEND ${lib_name}_libsrcs ${JXRDecode_srcs})
+###################
+set(JXREncode_srcs
+  image/encode/encode.c
+  image/encode/encode.h
+  image/encode/segenc.c
+  image/encode/strenc.c
+  image/encode/strenc_x86.c
+  image/encode/strFwdTransform.c
+  image/encode/strPredQuantEnc.c
+  )
+source_group(JXREncode FILES ${JXREncode_srcs})
+list(APPEND ${lib_name}_libsrcs ${JXREncode_srcs})
+###################
+set(Include_srcs
+  common/include/guiddef.h
+  common/include/wmsal.h
+  common/include/wmspecstring.h
+  common/include/wmspecstrings_adt.h
+  common/include/wmspecstrings_strict.h
+  common/include/wmspecstrings_undef.h
+  )
+source_group(Include FILES ${Include_srcs})
+list(APPEND ${lib_name}_libsrcs ${Include_srcs})
+###################
+set(JXRGlue_srcs
+  jxrgluelib/JXRGlue.c
+  jxrgluelib/JXRGlue.h
+  jxrgluelib/JXRGlueJxr.c
+  jxrgluelib/JXRGluePFC.c
+  jxrgluelib/JXRMeta.c
+  jxrgluelib/JXRMeta.h
+  )
+source_group(JXRGlue FILES ${JXRGlue_srcs})
+list(APPEND ${lib_name}_libsrcs ${JXRGlue_srcs})
+###################
+set(JXRTest_srcs
+  jxrtestlib/JXRTest.c
+  jxrtestlib/JXRTest.h
+  jxrtestlib/JXRTestBmp.c
+  jxrtestlib/JXRTestHdr.c
+  jxrtestlib/JXRTestPnm.c
+  jxrtestlib/JXRTestTif.c
+  jxrtestlib/JXRTestYUV.c
+  )
+source_group(JXRTest FILES ${JXRTest_srcs})
+list(APPEND ${lib_name}_libsrcs ${JXRTest_srcs})
+#######################################
+set(verString "^JXR_VERSION=+([0-9]+)\\.([0-9]+)?")
+file(STRINGS Makefile VER REGEX "${verString}")
+string(REGEX REPLACE "${verString}" "\\1.\\2" VER ${VER})
+#######################################
+add_library(${lib_name} STATIC ${${lib_name}_libsrcs})
+target_include_directories(${lib_name} PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/jxrtestlib>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/jxrgluelib>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/image/sys>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/common/include>
+  )
+target_compile_definitions(${lib_name} PRIVATE -DDISABLE_PERF_MEASUREMENT)
+if(CMAKE_COMPILER_IS_GNUCXX OR "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
+  target_compile_definitions(${lib_name} PRIVATE -D__ANSI__)
+endif()
+include(CheckLibraryExists)
+check_library_exists(m pow "${CMAKE_LIBRARY_PATH}" HAVE_LIBM)
+if(HAVE_LIBM)
+  target_link_libraries(${lib_name} PRIVATE m)
+endif()
+#######################################
+set(exes JXRDec420 JxrDecApp JxrEnc420 JxrEncApp)
+foreach(exe ${exes})
+  add_executable(${exe} jxrencoderdecoder/${exe}.c)
+  target_link_libraries(${exe} PRIVATE ${lib_name})
+endforeach()
+#######################################
+set(lib_hdrs
+  "${Include_srcs}"
+  image/sys/windowsmediaphoto.h
+  jxrgluelib/JXRGlue.h
+  jxrgluelib/JXRMeta.h
+  )
+set(targetsFile ${PROJECT_NAME}-targets)
+install(TARGETS ${lib_name} EXPORT ${targetsFile}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  )
+install(FILES ${lib_hdrs} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})
+if(DEFINED XP_NAMESPACE)
+  set(nameSpace NAMESPACE ${XP_NAMESPACE}::)
+endif()
+if(NOT DEFINED XP_INSTALL_CMAKEDIR)
+  set(XP_INSTALL_CMAKEDIR ${CMAKE_INSTALL_DATADIR}/cmake)
+endif()
+install(EXPORT ${targetsFile} DESTINATION ${XP_INSTALL_CMAKEDIR} ${nameSpace})
diff --git a/Makefile b/Makefile
index d4d9192..5ce8be8 100644
--- a/Makefile
+++ b/Makefile
@@ -31,7 +31,7 @@ build: all
 
 CC=cc
 
-JXR_VERSION=1.1
+JXR_VERSION=15.08
 
 DIR_SRC=$(CURDIR)
 DIR_SYS=image/sys
diff --git a/common/include/guiddef.h b/common/include/guiddef.h
index 17e0ed3..a317d74 100644
--- a/common/include/guiddef.h
+++ b/common/include/guiddef.h
@@ -53,6 +53,10 @@ typedef struct _GUID {
 #endif
 #endif
 
+#if defined(__GNUC__) && !defined(__ANSI__)
+#define __ANSI__
+#endif
+
 #ifndef FAR
 #if defined(_WIN32) || defined(__ANSI__)
 #define FAR
diff --git a/common/include/wmspecstring.h b/common/include/wmspecstring.h
index 1b4767e..2b6d9ca 100644
--- a/common/include/wmspecstring.h
+++ b/common/include/wmspecstring.h
@@ -37,7 +37,7 @@
 #if _MSC_VER
 #pragma once
 #endif
-#include <wmsal.h>  
+#include "wmsal.h"
 
 #ifndef __SAL_H_FULL_VER
 #define __SAL_H_FULL_VER 140050727
@@ -301,7 +301,7 @@ __inner_assume_bound_dec
 #ifdef  __cplusplus
 }
 #endif
-#include <wmspecstrings_adt.h>
+#include "wmspecstrings_adt.h"
 #ifdef _PREFIX_
 /**************************************************************************
 * Defintion of __pfx_assume and __pfx_assert. Thse should be the only
@@ -328,7 +328,7 @@ void __pfx_assume(int, const char *);
 * Must avoid redfinitions of macros to workaround rc.exe issues. 
 ***************************************************************************/
 #if !(defined(RC_INVOKED) || defined(SORTPP_PASS))
-#include <wmspecstrings_strict.h>
+#include "wmspecstrings_strict.h"
 #endif /* if !(defined(RC_INVOKED) || defined(SORTPP_PASS)) */
 #endif /* #ifndef SPECSTRINGS_H */
 
diff --git a/common/include/wmspecstrings_strict.h b/common/include/wmspecstrings_strict.h
index 46b44c2..fe41b81 100644
--- a/common/include/wmspecstrings_strict.h
+++ b/common/include/wmspecstrings_strict.h
@@ -210,7 +210,7 @@
 ************************************************************************/
 #if (_MSC_VER >= 1400) && !defined(__midl) && !defined(_PREFAST_) && (__SPECSTRINGS_STRICT_LEVEL > 0)
 #pragma once
-#include <wmspecstrings_undef.h>
+#include "wmspecstrings_undef.h"
 #define __ecount(size)                                __allowed(on_return)
 #define __bcount(size)                                __allowed(on_return)
 #define __xcount(size)                                __allowed(on_return)
diff --git a/image/encode/strenc.c b/image/encode/strenc.c
index d6e970e..9dc7e80 100644
--- a/image/encode/strenc.c
+++ b/image/encode/strenc.c
@@ -429,11 +429,11 @@ Int StrIOEncInit(CWMImageStrCodec* pSC)
 
     if(pSC->cNumBitIO > 0){
         size_t i;
-#if defined(_WINDOWS_) || defined(UNDER_CE)  // tmpnam does not exist in VS2005 WinCE CRT
+#if defined(_WINDOWS_) || defined(UNDER_CE)  // mkstemp/CreateWS_FileTemp does not exist
         TCHAR szPath[MAX_PATH];
         DWORD cSize, j, k;
-#endif
         char * pFilename;
+#endif
 
         pSC->ppWStream = (struct WMPStream **)malloc(pSC->cNumBitIO * sizeof(struct WMPStream *));
         if(pSC->ppWStream == NULL) return ICERR_ERROR;
@@ -453,7 +453,7 @@ Int StrIOEncInit(CWMImageStrCodec* pSC)
 
         for(i = 0; i < pSC->cNumBitIO; i ++){
             if (pSC->cmbHeight * pSC->cmbWidth * pSC->WMISCP.cChannel >= MAX_MEMORY_SIZE_IN_WORDS) {
-#if defined(_WINDOWS_) || defined(UNDER_CE)  // tmpnam does not exist in VS2005 WinCE CRT              
+#if defined(_WINDOWS_) || defined(UNDER_CE)  // mkstemp/CreateWS_FileTemp does not exist
                 Bool bUnicode = sizeof(TCHAR) == 2;
                 pSC->ppTempFile[i] = (TCHAR *)malloc(MAX_PATH * sizeof(TCHAR));
                 if(pSC->ppTempFile[i] == NULL) return ICERR_ERROR;
@@ -477,17 +477,15 @@ Int StrIOEncInit(CWMImageStrCodec* pSC)
                     }
                     pFilename[cSize] = '\0';
                 }
+                if(CreateWS_File(pSC->ppWStream + i, pFilename, "w+b") != ICERR_OK) return ICERR_ERROR;
 
 #else //DPK needs to support ANSI 
                 pSC->ppTempFile[i] = (char *)malloc(FILENAME_MAX * sizeof(char));
                 if(pSC->ppTempFile[i] == NULL) return ICERR_ERROR;
 
-                if ((pFilename = tmpnam(NULL)) == NULL)
-                    return ICERR_ERROR;                
-                strcpy(pSC->ppTempFile[i], pFilename);
+                snprintf(pSC->ppTempFile[i], L_tmpnam, "%s/tmp.XXXXXXXXXX", P_tmpdir);
+                if(CreateWS_FileTemp(pSC->ppWStream + i, pSC->ppTempFile[i], "w+b") != ICERR_OK) return ICERR_ERROR;
 #endif
-                if(CreateWS_File(pSC->ppWStream + i, pFilename, "w+b") != ICERR_OK) return ICERR_ERROR;                
-
             }
             else {
                 if(CreateWS_List(pSC->ppWStream + i) != ICERR_OK) return ICERR_ERROR;
diff --git a/image/sys/strcodec.c b/image/sys/strcodec.c
index c746d6f..ff0c3fc 100644
--- a/image/sys/strcodec.c
+++ b/image/sys/strcodec.c
@@ -292,6 +292,37 @@ Cleanup:
     return err;
 }
 
+ERR CreateWS_FileTemp(struct WMPStream** ppWS, char* szFilename, const char* szMode)
+{
+#ifdef WIN32
+    ERR err = WMP_errFileIO;
+#else
+    ERR err = WMP_errSuccess;
+    struct WMPStream* pWS = NULL;
+
+    Call(WMPAlloc((void** )ppWS, sizeof(**ppWS)));
+    pWS = *ppWS;
+
+    pWS->Close = CloseWS_File;
+    pWS->EOS = EOSWS_File;
+
+    pWS->Read = ReadWS_File;
+    pWS->Write = WriteWS_File;
+    //pWS->GetLine = GetLineWS_File;
+
+    pWS->SetPos = SetPosWS_File;
+    pWS->GetPos = GetPosWS_File;
+
+    int fd = mkstemp(szFilename);
+    FailIf(-1 == fd, WMP_errFileIO);
+    pWS->state.file.pFile = fdopen(fd, szMode);
+    FailIf(NULL == pWS->state.file.pFile, WMP_errFileIO);
+#endif
+
+Cleanup:
+    return err;
+}
+
 ERR CloseWS_File(struct WMPStream** ppWS)
 {
     ERR err = WMP_errSuccess;
diff --git a/image/sys/strcodec.h b/image/sys/strcodec.h
index 695a454..90b94ba 100644
--- a/image/sys/strcodec.h
+++ b/image/sys/strcodec.h
@@ -64,7 +64,7 @@
 
 #ifndef UNREFERENCED_PARAMETER
 #define UNREFERENCED_PARAMETER(P) { (P) = (P); }
-#endif UNREFERENCED_PARAMETER
+#endif // UNREFERENCED_PARAMETER
 
 #ifdef UNDER_CE
 #define PLATFORM_WCE
diff --git a/jxrencoderdecoder/JxrDecApp.c b/jxrencoderdecoder/JxrDecApp.c
index 35fa10c..df0c415 100644
--- a/jxrencoderdecoder/JxrDecApp.c
+++ b/jxrencoderdecoder/JxrDecApp.c
@@ -427,7 +427,7 @@ ERR WmpDecAppCreateEncoderFromExt(
     Call(GetTestEncodeIID(szExt, &pIID));
 
     // Create encoder
-    Call(PKTestFactory_CreateCodec(pIID, ppIE));
+    Call(PKTestFactory_CreateCodec(pIID, (void **) ppIE));
 
 Cleanup:
     return err;
diff --git a/jxrencoderdecoder/JxrEncApp.c b/jxrencoderdecoder/JxrEncApp.c
index aa9de53..d0ce39a 100644
--- a/jxrencoderdecoder/JxrEncApp.c
+++ b/jxrencoderdecoder/JxrEncApp.c
@@ -615,7 +615,7 @@ main(int argc, char* argv[])
 
     //================================
     Call(PKCreateCodecFactory(&pCodecFactory, WMP_SDK_VERSION));
-    Call(pCodecFactory->CreateCodec(&IID_PKImageWmpEncode, &pEncoder));
+    Call(pCodecFactory->CreateCodec(&IID_PKImageWmpEncode, (void **) &pEncoder));
 
     //----------------------------------------------------------------
     Call(PKCreateTestFactory(&pTestFactory, WMP_SDK_VERSION));
diff --git a/jxrgluelib/JXRGlue.h b/jxrgluelib/JXRGlue.h
index 382763f..b439700 100644
--- a/jxrgluelib/JXRGlue.h
+++ b/jxrgluelib/JXRGlue.h
@@ -31,8 +31,12 @@
 extern "C" {
 #endif
 
-#include <JXRMeta.h>
-#include <guiddef.h>
+#if defined(__GNUC__) && !defined(__ANSI__)
+#define __ANSI__
+#endif
+
+#include "JXRMeta.h"
+#include "guiddef.h"
 
 //================================================================
 #define WMP_SDK_VERSION 0x0101
diff --git a/jxrgluelib/JXRMeta.h b/jxrgluelib/JXRMeta.h
index b7b5880..e9e0401 100644
--- a/jxrgluelib/JXRMeta.h
+++ b/jxrgluelib/JXRMeta.h
@@ -27,9 +27,9 @@
 //*@@@---@@@@******************************************************************
 #pragma once
 
-#include <windowsmediaphoto.h>
+#include "windowsmediaphoto.h"
 #ifndef WIN32
-#include <wmspecstring.h>
+#include "wmspecstring.h"
 #endif
 
 #ifndef UNREFERENCED_PARAMETER
diff --git a/jxrtestlib/JXRTest.c b/jxrtestlib/JXRTest.c
index b2a9b64..5552606 100644
--- a/jxrtestlib/JXRTest.c
+++ b/jxrtestlib/JXRTest.c
@@ -198,7 +198,7 @@ ERR PKTestFactory_CreateDecoderFromFile(const char* szFilename, PKImageDecode**
     ERR err = WMP_errSuccess;
 
     char *pExt = NULL;
-    PKIID* pIID = NULL;
+    const PKIID* pIID = NULL;
 
     struct WMPStream* pStream = NULL;
     PKImageDecode* pDecoder = NULL;
@@ -214,7 +214,7 @@ ERR PKTestFactory_CreateDecoderFromFile(const char* szFilename, PKImageDecode**
     Call(CreateWS_File(&pStream, szFilename, "rb"));
 
     // Create decoder
-    Call(PKTestFactory_CreateCodec(pIID, ppDecoder));
+    Call(PKTestFactory_CreateCodec(pIID, (void **) ppDecoder));
     pDecoder = *ppDecoder;
 
     // attach stream to decoder
@@ -232,7 +232,7 @@ ERR PKCreateTestFactory(PKCodecFactory** ppCFactory, U32 uVersion)
 
     UNREFERENCED_PARAMETER( uVersion );
 
-    Call(PKAlloc(ppCFactory, sizeof(**ppCFactory)));
+    Call(PKAlloc((void **) ppCFactory, sizeof(**ppCFactory)));
     pCFactory = *ppCFactory;
 
     pCFactory->CreateCodec = PKTestFactory_CreateCodec;
@@ -287,7 +287,7 @@ ERR PKTestDecode_Release(
 
     pID->fStreamOwner && pID->pStream->Close(&pID->pStream);
 
-    return PKFree(ppID);
+    return PKFree((void **) ppID);
 }
 
 ERR PKTestDecode_Create(
@@ -296,7 +296,7 @@ ERR PKTestDecode_Create(
     ERR err = WMP_errSuccess;
     PKTestDecode* pID = NULL;
 
-    Call(PKAlloc(ppID, sizeof(**ppID)));
+    Call(PKAlloc((void **) ppID, sizeof(**ppID)));
 
     pID = *ppID;
     pID->Initialize = PKTestDecode_Initialize;
diff --git a/jxrtestlib/JXRTestHdr.c b/jxrtestlib/JXRTestHdr.c
index a62914c..6f108fb 100644
--- a/jxrtestlib/JXRTestHdr.c
+++ b/jxrtestlib/JXRTestHdr.c
@@ -25,9 +25,9 @@
 // POSSIBILITY OF SUCH DAMAGE.
 //
 //*@@@---@@@@******************************************************************
-#ifndef ANSI
+#ifndef __ANSI__
 #define _CRT_SECURE_NO_WARNINGS
-#endif ANSI
+#endif // __ANSI__
 
 #include <stdlib.h>
 #include <string.h>
diff --git a/jxrtestlib/JXRTestPnm.c b/jxrtestlib/JXRTestPnm.c
index 8917d4a..840c746 100644
--- a/jxrtestlib/JXRTestPnm.c
+++ b/jxrtestlib/JXRTestPnm.c
@@ -27,7 +27,7 @@
 //*@@@---@@@@******************************************************************
 #ifndef ANSI
 #define _CRT_SECURE_NO_WARNINGS
-#endif ANSI
+#endif // ANSI
 
 #include <stdlib.h>
 
diff --git a/jxrtestlib/JXRTestTif.c b/jxrtestlib/JXRTestTif.c
index 39f619d..d8be054 100644
--- a/jxrtestlib/JXRTestTif.c
+++ b/jxrtestlib/JXRTestTif.c
@@ -909,8 +909,8 @@ ERR PKImageDecode_Release_TIF(PKTestDecode** ppID)
 
     PKTestDecode *pID = *ppID;
 
-    Call(WMPFree(&pID->EXT.TIF.uStripOffsets));
-    Call(WMPFree(&pID->EXT.TIF.uStripByteCounts));
+    Call(WMPFree((void **) &pID->EXT.TIF.uStripOffsets));
+    Call(WMPFree((void **) &pID->EXT.TIF.uStripByteCounts));
 
     Call(PKTestDecode_Release(ppID));
 
